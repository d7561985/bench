// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	server.proto

It has these top-level messages:
	ExecuteRequest
	RunRequest
	StartPluginRequest
	ServerEmpty
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type ExecuteRequest struct {
}

func (m *ExecuteRequest) Reset()                    { *m = ExecuteRequest{} }
func (m *ExecuteRequest) String() string            { return proto1.CompactTextString(m) }
func (*ExecuteRequest) ProtoMessage()               {}
func (*ExecuteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type RunRequest struct {
	Plugin   []byte `protobuf:"bytes,1,opt,name=plugin,proto3" json:"plugin,omitempty"`
	Threads  int64  `protobuf:"varint,2,opt,name=threads" json:"threads,omitempty"`
	Duration int64  `protobuf:"varint,3,opt,name=duration" json:"duration,omitempty"`
	Ramp     int64  `protobuf:"varint,4,opt,name=ramp" json:"ramp,omitempty"`
	Timeout  int64  `protobuf:"varint,5,opt,name=timeout" json:"timeout,omitempty"`
}

func (m *RunRequest) Reset()                    { *m = RunRequest{} }
func (m *RunRequest) String() string            { return proto1.CompactTextString(m) }
func (*RunRequest) ProtoMessage()               {}
func (*RunRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RunRequest) GetPlugin() []byte {
	if m != nil {
		return m.Plugin
	}
	return nil
}

func (m *RunRequest) GetThreads() int64 {
	if m != nil {
		return m.Threads
	}
	return 0
}

func (m *RunRequest) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *RunRequest) GetRamp() int64 {
	if m != nil {
		return m.Ramp
	}
	return 0
}

func (m *RunRequest) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

type StartPluginRequest struct {
	Plugin []byte `protobuf:"bytes,1,opt,name=plugin,proto3" json:"plugin,omitempty"`
}

func (m *StartPluginRequest) Reset()                    { *m = StartPluginRequest{} }
func (m *StartPluginRequest) String() string            { return proto1.CompactTextString(m) }
func (*StartPluginRequest) ProtoMessage()               {}
func (*StartPluginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *StartPluginRequest) GetPlugin() []byte {
	if m != nil {
		return m.Plugin
	}
	return nil
}

type ServerEmpty struct {
}

func (m *ServerEmpty) Reset()                    { *m = ServerEmpty{} }
func (m *ServerEmpty) String() string            { return proto1.CompactTextString(m) }
func (*ServerEmpty) ProtoMessage()               {}
func (*ServerEmpty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto1.RegisterType((*ExecuteRequest)(nil), "proto.ExecuteRequest")
	proto1.RegisterType((*RunRequest)(nil), "proto.RunRequest")
	proto1.RegisterType((*StartPluginRequest)(nil), "proto.StartPluginRequest")
	proto1.RegisterType((*ServerEmpty)(nil), "proto.ServerEmpty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BenchServer service

type BenchServerClient interface {
	Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ServerEmpty, error)
	StartPlugin(ctx context.Context, in *StartPluginRequest, opts ...grpc.CallOption) (*ServerEmpty, error)
	Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*ServerEmpty, error)
	Stop(ctx context.Context, in *ServerEmpty, opts ...grpc.CallOption) (*ServerEmpty, error)
}

type benchServerClient struct {
	cc *grpc.ClientConn
}

func NewBenchServerClient(cc *grpc.ClientConn) BenchServerClient {
	return &benchServerClient{cc}
}

func (c *benchServerClient) Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ServerEmpty, error) {
	out := new(ServerEmpty)
	err := grpc.Invoke(ctx, "/proto.BenchServer/Execute", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *benchServerClient) StartPlugin(ctx context.Context, in *StartPluginRequest, opts ...grpc.CallOption) (*ServerEmpty, error) {
	out := new(ServerEmpty)
	err := grpc.Invoke(ctx, "/proto.BenchServer/StartPlugin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *benchServerClient) Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*ServerEmpty, error) {
	out := new(ServerEmpty)
	err := grpc.Invoke(ctx, "/proto.BenchServer/Run", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *benchServerClient) Stop(ctx context.Context, in *ServerEmpty, opts ...grpc.CallOption) (*ServerEmpty, error) {
	out := new(ServerEmpty)
	err := grpc.Invoke(ctx, "/proto.BenchServer/Stop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BenchServer service

type BenchServerServer interface {
	Execute(context.Context, *ExecuteRequest) (*ServerEmpty, error)
	StartPlugin(context.Context, *StartPluginRequest) (*ServerEmpty, error)
	Run(context.Context, *RunRequest) (*ServerEmpty, error)
	Stop(context.Context, *ServerEmpty) (*ServerEmpty, error)
}

func RegisterBenchServerServer(s *grpc.Server, srv BenchServerServer) {
	s.RegisterService(&_BenchServer_serviceDesc, srv)
}

func _BenchServer_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenchServerServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BenchServer/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenchServerServer).Execute(ctx, req.(*ExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BenchServer_StartPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartPluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenchServerServer).StartPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BenchServer/StartPlugin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenchServerServer).StartPlugin(ctx, req.(*StartPluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BenchServer_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenchServerServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BenchServer/Run",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenchServerServer).Run(ctx, req.(*RunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BenchServer_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerEmpty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenchServerServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BenchServer/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenchServerServer).Stop(ctx, req.(*ServerEmpty))
	}
	return interceptor(ctx, in, info, handler)
}

var _BenchServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BenchServer",
	HandlerType: (*BenchServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Execute",
			Handler:    _BenchServer_Execute_Handler,
		},
		{
			MethodName: "StartPlugin",
			Handler:    _BenchServer_StartPlugin_Handler,
		},
		{
			MethodName: "Run",
			Handler:    _BenchServer_Run_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _BenchServer_Stop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}

func init() { proto1.RegisterFile("server.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 252 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x50, 0x41, 0x4e, 0xc3, 0x30,
	0x10, 0x94, 0x49, 0xda, 0xa2, 0x4d, 0x41, 0xb0, 0x12, 0xc8, 0xf4, 0x54, 0xe5, 0xd4, 0x43, 0x95,
	0x03, 0x70, 0xe4, 0x84, 0xd4, 0x3b, 0x72, 0x5e, 0x10, 0xda, 0x15, 0x8d, 0x44, 0x6c, 0xe3, 0xac,
	0x11, 0xfc, 0x80, 0x5f, 0xf2, 0x15, 0x24, 0xc7, 0x85, 0x20, 0x2c, 0x71, 0xb2, 0x67, 0x76, 0x3c,
	0x9e, 0x59, 0x98, 0xf7, 0xe4, 0x5e, 0xc9, 0x55, 0xd6, 0x19, 0x36, 0x38, 0x09, 0x47, 0x79, 0x06,
	0xa7, 0x9b, 0x37, 0xda, 0x7a, 0x26, 0x45, 0x2f, 0x9e, 0x7a, 0x2e, 0x3f, 0x04, 0x80, 0xf2, 0x3a,
	0x42, 0xbc, 0x84, 0xa9, 0x7d, 0xf6, 0x4f, 0xad, 0x96, 0x62, 0x29, 0x56, 0x73, 0x15, 0x11, 0x4a,
	0x98, 0xf1, 0xde, 0x51, 0xb3, 0xeb, 0xe5, 0xd1, 0x52, 0xac, 0x32, 0x75, 0x80, 0xb8, 0x80, 0xe3,
	0x9d, 0x77, 0x0d, 0xb7, 0x46, 0xcb, 0x2c, 0x8c, 0xbe, 0x31, 0x22, 0xe4, 0xae, 0xe9, 0xac, 0xcc,
	0x03, 0x1f, 0xee, 0xc1, 0xa9, 0xed, 0xc8, 0x78, 0x96, 0x93, 0xe8, 0x34, 0xc0, 0x72, 0x0d, 0x58,
	0x73, 0xe3, 0xf8, 0x21, 0x7c, 0xf9, 0x4f, 0xa2, 0xf2, 0x04, 0x8a, 0x3a, 0x34, 0xdc, 0x74, 0x96,
	0xdf, 0xaf, 0x3f, 0x05, 0x14, 0xf7, 0xa4, 0xb7, 0xfb, 0x81, 0xc4, 0x5b, 0x98, 0xc5, 0xa6, 0x78,
	0x31, 0xec, 0xa0, 0xfa, 0xdd, 0x7c, 0x81, 0x91, 0x1e, 0xb9, 0xe0, 0x1d, 0x14, 0xa3, 0x08, 0x78,
	0x75, 0x90, 0xfc, 0x89, 0x95, 0x7c, 0xbd, 0x86, 0x4c, 0x79, 0x8d, 0xe7, 0x71, 0xf4, 0xb3, 0xd6,
	0xa4, 0xba, 0x82, 0xbc, 0x66, 0x63, 0x31, 0x31, 0x4b, 0xe9, 0x1f, 0xa7, 0x81, 0xba, 0xf9, 0x0a,
	0x00, 0x00, 0xff, 0xff, 0x91, 0xee, 0xfa, 0xe8, 0xd9, 0x01, 0x00, 0x00,
}
